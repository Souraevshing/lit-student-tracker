generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String       @unique
  password      String?
  name          String
  age           Int
  gender        String
  qualification String
  course        String
  application   Application?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Application {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  userId   String         @unique @db.ObjectId
  user     User           @relation(fields: [userId], references: [id])
  status   String         @default("pending")
  timeline TimelineStep[]
  payments Payment[]
}

model TimelineStep {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  step          String
  date          DateTime    @default(now())
  applicationId String      @db.ObjectId
  application   Application @relation(fields: [applicationId], references: [id])
}

model Payment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  applicationId String      @db.ObjectId
  application   Application @relation(fields: [applicationId], references: [id])
  amount        Float
  method        String
  status        String
  reference     String
  details       Json?
  createdAt     DateTime    @default(now())
}
